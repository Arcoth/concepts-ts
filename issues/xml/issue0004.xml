<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="4" status="EWG">
<title>Exception constraints</title>
<section><sref ref="[expr.prim.req.compound]"/></section>
<submitter>US</submitter>
<date>18 May 2015</date>

<discussion>
<p>
We believe that (generally speaking) the non throwing of exceptions is a 
part of the runtime contract of a function, not something that should be
advertised in the type system outside a few very specific cases related to 
move operations. As a <code>requires</code> expression is always free to invoke the
<code>noexcept</code> operator to produce a predicate, we believe that is sufficient 
support for exception constraints in the language, and directly
supporting this additional term in the grammar would be harmful, encouraging 
compile-time contracts taking away an important library implementer freedom. 
As the TS is intended to provide feedback, we believe it would be better to
proceed without this, and see how much demand arises from using the 
alternate form, and whether that alternate form alone is too cumbersome for 
real world use.
</p>

<p>
Simplify the <i>compound-requirement</i>: term in 5.1.4.3:

<pre>
<code>
    { expression } <del>[noexcept]</del> [trailing-­return­-type]
</code>
</pre>

Strike 14.10.1.7.
</p>

<p>
Also see <iref ref="5"/> as it relates.
</p>

<p>
Suggest opening an EWG issue.
</p>
</discussion>

</issue>
